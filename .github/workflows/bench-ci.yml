name: Bench CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  CONFIGURATION: Release
  PLATFORM: x64
  PERF_THRESHOLD_PCT: 10

jobs:
  bench-windows:
    name: Bench (Windows ${{ env.CONFIGURATION }}|${{ env.PLATFORM }})
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build (MSBuild)
        run: |
          msbuild D-Engine.sln -m -p:Configuration=${{ env.CONFIGURATION }} -p:Platform=${{ env.PLATFORM }}

      - name: Run BenchRunner
        env:
          # These are provided by GitHub; our runner reads GITHUB_SHA first.
          GITHUB_SHA: ${{ github.sha }}
          DNG_BENCH_OUT: artifacts/bench
        run: |
          $exe = Join-Path "x64" $env:PLATFORM | Join-Path -ChildPath $env:CONFIGURATION | Join-Path -ChildPath "D-Engine-BenchRunner.exe"
          if (-not (Test-Path $exe)) { throw "BenchRunner not found: $exe" }
          Write-Host "Running: $exe"
          & $exe

      - name: Upload bench artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bench-${{ env.CONFIGURATION }}-${{ env.PLATFORM }}
          path: |
            artifacts/bench/**/*.bench.json
          if-no-files-found: error

      - name: Compare with baseline
        run: |
          $ErrorActionPreference = 'Stop'
          $thresholdPct = [double]${{ env.PERF_THRESHOLD_PCT }}
          $baseline = "bench/baselines/bench-runner-release-windows-x64-msvc.baseline.json"
          if (-not (Test-Path $baseline)) { throw "Baseline not found: $baseline" }

          $latest = Get-ChildItem -Path "artifacts/bench" -Filter *.bench.json -Recurse | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $latest) { throw "No bench json found in artifacts/bench" }

          Write-Host "Baseline: $baseline"
          Write-Host "Current : $($latest.FullName)"

          $baseJson = Get-Content -Raw -Path $baseline | ConvertFrom-Json
          $currJson = Get-Content -Raw -Path $latest.FullName | ConvertFrom-Json

          if (-not $baseJson.metrics -or -not $currJson.metrics) { throw "Invalid JSON schema: missing metrics[]" }

          $baseMap = @{}
          foreach ($m in $baseJson.metrics) { $baseMap[$m.name] = $m }

          $regressions = @()
          foreach ($m in $currJson.metrics) {
            $name = $m.name
            if (-not $baseMap.ContainsKey($name)) { continue }
            $b = $baseMap[$name]
            $bval = [double]$b.value
            $cval = [double]$m.value
            if ($bval -le 0) { continue }
            $deltaPct = (($cval - $bval) / $bval) * 100.0
            Write-Host ("{0} : baseline={1:F3} {2}, current={3:F3} {4}, delta={5:F2} %" -f $name, $bval, $b.unit, $cval, $m.unit, $deltaPct)
            if ($deltaPct -gt $thresholdPct) {
              $regressions += @{ name=$name; baseline=$bval; current=$cval; unit=$m.unit; delta=$deltaPct }
            }
          }

          if ($regressions.Count -gt 0) {
            Write-Error ("Performance regression(s) detected beyond threshold {0}%:" -f $thresholdPct)
            foreach ($r in $regressions) {
              Write-Error (" - {0}: {1:F3} -> {2:F3} {3} ({4:F2}% worse)" -f $r.name, $r.baseline, $r.current, $r.unit, $r.delta)
            }
            exit 1
          } else {
            Write-Host ("No regressions above {0}% threshold." -f $thresholdPct)
          }
